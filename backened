import psutil
import random
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from collections import deque

class Process:
    def __init__(self, pid, name, arrival_time, burst_time):
        self.pid = pid
        self.name = name
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.remaining_time = burst_time
        self.waiting_time = 0
        self.turnaround_time = 0
        self.start_times = []
        self.end_times = []

    def __str__(self):
        return f"Process {self.pid} ({self.name}): AT={self.arrival_time}, BT={self.burst_time}, WT={self.waiting_time}, TAT={self.turnaround_time}"

def get_real_processes(max_processes=10):
    """Fetch real processes using psutil and assign random burst times."""
    processes = []
    for i, proc in enumerate(psutil.process_iter(['pid', 'name'])):
        if i >= max_processes:
            break
        try:
            processes.append(Process(
                pid=proc.info['pid'],
                name=proc.info['name'],
                arrival_time=i,  # Simulate arrival time
                burst_time=random.randint(1, 10)  # Assign random burst time
            ))
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

def plot_gantt_chart(schedule, title):
    """Plot a Gantt chart for the given schedule."""
    fig, ax = plt.subplots(figsize=(12, 6))
    
    colors = plt.cm.tab20.colors
    color_map = {}
    
    y_ticks = []
    y_labels = []
    
    for i, (pid, name, start, end) in enumerate(schedule):
        if pid not in color_map:
            color_map[pid] = colors[len(color_map) % len(colors)]
        
        duration = end - start
        rect = patches.Rectangle(
            (start, i), duration, 0.8,
            facecolor=color_map[pid],
            edgecolor='black',
            linewidth=1
        )
        ax.add_patch(rect)
        ax.text(start + duration/2, i + 0.4, f"{name}\n({duration})", 
                ha='center', va='center', color='white')
        y_ticks.append(i + 0.4)
        y_labels.append(f"PID: {pid}")
    
    ax.set_xlabel('Time Units')
    ax.set_ylabel('Processes')
    ax.set_title(title)
    ax.set_yticks(y_ticks)
    ax.set_yticklabels(y_labels)
    ax.grid(True, axis='x')
    plt.tight_layout()
    plt.show()

def fcfs_scheduling(processes):
    """First-Come-First-Serve Scheduling."""
    processes = sorted(processes.copy(), key=lambda x: x.arrival_time)
    current_time = 0
    gantt_chart = []
    
    for process in processes:
        if current_time < process.arrival_time:
            current_time = process.arrival_time
        
        start_time = current_time
        end_time = current_time + process.burst_time
        gantt_chart.append((process.pid, process.name, start_time, end_time))
        
        process.waiting_time = start_time - process.arrival_time
        process.turnaround_time = end_time - process.arrival_time
        current_time = end_time
    
    return processes, gantt_chart

def round_robin_scheduling(processes, time_quantum=2):
    """Round Robin Scheduling."""
    processes = sorted(processes.copy(), key=lambda x: x.arrival_time)
    queue = deque()
    current_time = 0
    gantt_chart = []
    remaining_processes = processes.copy()
    
    while remaining_processes or queue:
        # Add arriving processes to queue
        while remaining_processes and remaining_processes[0].arrival_time <= current_time:
            queue.append(remaining_processes.pop(0))
        
        if queue:
            current_process = queue.popleft()
            start_time = current_time
            exec_time = min(time_quantum, current_process.remaining_time)
            end_time = current_time + exec_time
            gantt_chart.append((current_process.pid, current_process.name, start_time, end_time))
            
            current_process.remaining_time -= exec_time
            current_time = end_time
            
            if current_process.remaining_time > 0:
                queue.append(current_process)
            else:
                current_process.turnaround_time = current_time - current_process.arrival_time
                current_process.waiting_time = current_process.turnaround_time - current_process.burst_time
        else:
            current_time += 1
    
    return processes, gantt_chart

def main():
    # Fetch real processes (limited to 10 for clarity)
    processes = get_real_processes(max_processes=10)
    
    print("Real Processes (Simulated Burst Time):")
    for p in processes:
        print(p)
    
    # Run FCFS Scheduling
    print("\nFCFS Scheduling Results:")
    fcfs_result, fcfs_gantt = fcfs_scheduling(processes)
    for p in fcfs_result:
        print(p)
    plot_gantt_chart(fcfs_gantt, "FCFS Scheduling (Real Processes)")
    
    # Run Round Robin Scheduling
    print("\nRound Robin Scheduling Results (Time Quantum=2):")
    rr_result, rr_gantt = round_robin_scheduling(processes)
    for p in rr_result:
        print(p)
    plot_gantt_chart(rr_gantt, "Round Robin Scheduling (Real Processes)")

if __name__ == "__main__":
    main()
