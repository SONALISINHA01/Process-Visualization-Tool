import sys
import psutil
import random
from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *
import pyqtgraph as pg
import numpy as np
from datetime import datetime
from collections import deque

# Matplotlib imports for Gantt chart
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

class ThemeColors:
    DARK = {
        'primary_bg': '#1E1E2E',
        'secondary_bg': '#282A36',
        'text': '#EAEAEA',
        'border': '#4A4A4A',
        'progress_normal': '#4CAF50',
        'progress_warning': '#FFA500',
        'progress_critical': '#FF4C4C',
        'graph_cpu': '#00BFFF',
        'graph_memory': '#FFD700',
        'button_refresh': '#4CAF50',
        'button_scheduling': '#8A2BE2'
    }
    
    LIGHT = {
        'primary_bg': '#FFFFFF',
        'secondary_bg': '#F5F5F5',
        'text': '#333333',
        'border': '#D3D3D3',
        'progress_normal': '#32CD32',
        'progress_warning': '#FFD700',
        'progress_critical': '#FF4500',
        'graph_cpu': '#1E90FF',
        'graph_memory': '#32CD32',
        'button_refresh': '#1E90FF',
        'button_scheduling': '#FF8C00'
    }
    
    CYBERPUNK = {
        'primary_bg': '#0D1117',
        'secondary_bg': '#161B22',
        'text': '#39FF14',
        'border': '#00FFFF',
        'progress_normal': '#39FF14',
        'progress_warning': '#FFBF00',
        'progress_critical': '#FF3131',
        'graph_cpu': '#FF007F',
        'graph_memory': '#00FFFF',
        'button_refresh': '#00FFFF',
        'button_scheduling': '#8A2BE2'
    }

class Process:
    def __init__(self, pid, name, arrival_time, burst_time, priority=0):
        self.pid = pid
        self.name = name
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.priority = priority
        self.remaining_time = burst_time
        self.completion_time = 0
        self.turnaround_time = 0
        self.waiting_time = 0
        self.response_time = -1
        self.started = False

class SchedulingResult:
    def __init__(self):
        self.processes = []
        self.gantt_chart = []
        self.avg_turnaround = 0
        self.avg_waiting = 0
        self.throughput = 0

class SchedulingVisualizer(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("CPU Scheduling Visualization")
        self.setWindowState(Qt.WindowMaximized)
        self.processes = []
        self.setup_ui()
        
    def setup_ui(self):
        self.setStyleSheet("""
            QDialog {
                background-color: #F5F5F5;
                font-family: Arial;
            }
            QGroupBox {
                font-size: 16px;
                font-weight: bold;
                border: 2px solid #D3D3D3;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 15px;
            }
            QLabel {
                font-size: 14px;
            }
            QComboBox, QSpinBox {
                font-size: 14px;
                padding: 5px;
                min-height: 30px;
                border: 1px solid #D3D3D3;
                border-radius: 4px;
            }
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 8px 16px;
                border: 1px solid #D3D3D3;
                border-radius: 4px;
                min-width: 120px;
                min-height: 30px;
            }
            QTableWidget {
                font-size: 14px;
                border: 2px solid #D3D3D3;
                border-radius: 5px;
            }
            QHeaderView::section {
                font-size: 14px;
                font-weight: bold;
                padding: 5px;
                background-color: #4CAF50;
            }
        """)

        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # Control panel with group box
        control_group = QGroupBox("Scheduling Controls")
        control_layout = QHBoxLayout(control_group)
        control_layout.setContentsMargins(15, 25, 15, 15)
        control_layout.setSpacing(20)
        
        # Algorithm selection
        algo_label = QLabel("Algorithm:")
        algo_label.setStyleSheet("font-weight: bold;")
        
        self.algorithm_combo = QComboBox()
        self.algorithm_combo.addItems([
            "First Come First Serve (FCFS)",
            "Shortest Job First (SJF)",
            "Round Robin (RR)",
            "Priority Scheduling"
        ])
        self.algorithm_combo.setMinimumWidth(250)
        
        # Quantum input (only for Round Robin)
        self.quantum_label = QLabel("Time Quantum (ms):")
        self.quantum_label.setStyleSheet("font-weight: bold;")
        self.quantum_spin = QSpinBox()
        self.quantum_spin.setRange(1, 100)
        self.quantum_spin.setValue(4)
        self.quantum_label.setVisible(False)
        self.quantum_spin.setVisible(False)
        
        # Run button
        self.run_btn = QPushButton("Run Scheduling")
        self.run_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                font-size: 16px;
                min-width: 150px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.run_btn.setEnabled(False)
        
        control_layout.addWidget(algo_label)
        control_layout.addWidget(self.algorithm_combo)
        control_layout.addWidget(self.quantum_label)
        control_layout.addWidget(self.quantum_spin)
        control_layout.addStretch()
        control_layout.addWidget(self.run_btn)
        
        # Gantt chart with group box
        gantt_group = QGroupBox("Gantt Chart")
        gantt_layout = QVBoxLayout(gantt_group)
        gantt_layout.setContentsMargins(5, 15, 5, 5)
        
        self.figure = Figure(figsize=(12, 6), dpi=100)
        self.canvas = FigureCanvas(self.figure)
        gantt_layout.addWidget(self.canvas)
        
        # Process table with group box
        table_group = QGroupBox("Process Execution Details")
        table_layout = QVBoxLayout(table_group)
        table_layout.setContentsMargins(5, 15, 5, 5)
        
        self.process_table = QTableWidget()
        self.process_table.setColumnCount(8)
        self.process_table.setHorizontalHeaderLabels([
            "PID", "Name", "Arrival", "Burst", "Priority", 
            "Completion", "Turnaround", "Waiting"
        ])
        self.process_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.process_table.verticalHeader().setVisible(False)
        self.process_table.setStyleSheet("""
            QTableWidget {
                font-size: 14px;
            }
            QTableWidget::item {
                padding: 5px;
            }
        """)
        table_layout.addWidget(self.process_table)
        
        # Stats display at bottom
        stats_group = QGroupBox("Performance Metrics")
        stats_layout = QHBoxLayout(stats_group)
        stats_layout.setContentsMargins(15, 15, 15, 15)
        
        self.avg_turnaround_label = QLabel("Average Turnaround Time: -")
        self.avg_waiting_label = QLabel("Average Waiting Time: -")
        self.throughput_label = QLabel("Throughput: -")
        
        for label in [self.avg_turnaround_label, self.avg_waiting_label, self.throughput_label]:
            label.setStyleSheet("font-size: 16px; font-weight: bold;")
            stats_layout.addWidget(label)
        
        stats_layout.addStretch()
        
        # Main layout organization
        layout.addWidget(control_group)
        layout.addWidget(gantt_group, stretch=1)  # Gantt chart takes most space
        layout.addWidget(table_group)
        layout.addWidget(stats_group)
        
        # Connect signals
        self.algorithm_combo.currentTextChanged.connect(self.toggle_quantum_visibility)
        self.run_btn.clicked.connect(self.run_scheduling)
        
        # Generate initial processes
        self.generate_processes()
        
    def toggle_quantum_visibility(self, text):
        show_quantum = "Round Robin" in text
        self.quantum_label.setVisible(show_quantum)
        self.quantum_spin.setVisible(show_quantum)
        
    def generate_processes(self):
        # Get real processes from system
        system_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
            try:
                if proc.info['cpu_percent'] > 0:
                    system_processes.append(proc)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        # Create synthetic processes if we don't have enough real ones
        if len(system_processes) < 5:
            self.processes = [
                Process(101, "System", 0, random.randint(3, 8)),
                Process(102, "Browser", 1, random.randint(4, 10)),
                Process(103, "Editor", 2, random.randint(2, 6)),
                Process(104, "Terminal", 3, random.randint(3, 7)),
                Process(105, "Media", 4, random.randint(5, 12))
            ]
        else:
            # Use real processes with synthetic burst times
            self.processes = []
            for i, proc in enumerate(random.sample(system_processes, min(8, len(system_processes)))):
                self.processes.append(Process(
                    proc.info['pid'],
                    proc.info['name'][:15],
                    i,
                    random.randint(2, 10),
                    random.randint(1, 5)
                ))
        
        self.run_btn.setEnabled(True)
        
    def update_process_table(self, processes):
        self.process_table.setRowCount(len(processes))
        for i, process in enumerate(processes):
            self.process_table.setItem(i, 0, QTableWidgetItem(str(process.pid)))
            self.process_table.setItem(i, 1, QTableWidgetItem(process.name))
            self.process_table.setItem(i, 2, QTableWidgetItem(str(process.arrival_time)))
            self.process_table.setItem(i, 3, QTableWidgetItem(str(process.burst_time)))
            self.process_table.setItem(i, 4, QTableWidgetItem(str(process.priority)))
            self.process_table.setItem(i, 5, QTableWidgetItem(str(process.completion_time)))
            self.process_table.setItem(i, 6, QTableWidgetItem(str(process.turnaround_time)))
            self.process_table.setItem(i, 7, QTableWidgetItem(str(process.waiting_time)))
        
    def run_scheduling(self):
        algorithm = self.algorithm_combo.currentText()
        
        if "FCFS" in algorithm:
            result = self.fcfs_scheduling()
        elif "SJF" in algorithm:
            result = self.sjf_scheduling()
        elif "Round Robin" in algorithm:
            quantum = self.quantum_spin.value()
            result = self.round_robin_scheduling(quantum)
        elif "Priority" in algorithm:
            result = self.priority_scheduling()
        else:
            return
            
        self.display_results(result)
        
    def fcfs_scheduling(self):
        result = SchedulingResult()
        processes = sorted(self.processes, key=lambda x: x.arrival_time)
        
        current_time = 0
        gantt = []
        
        for process in processes:
            if current_time < process.arrival_time:
                current_time = process.arrival_time
                
            process.completion_time = current_time + process.burst_time
            process.turnaround_time = process.completion_time - process.arrival_time
            process.waiting_time = process.turnaround_time - process.burst_time
            
            gantt.append((process.pid, current_time, process.completion_time))
            current_time = process.completion_time
            
        result.processes = processes
        result.gantt_chart = gantt
        result.avg_turnaround = sum(p.turnaround_time for p in processes) / len(processes)
        result.avg_waiting = sum(p.waiting_time for p in processes) / len(processes)
        result.throughput = len(processes) / current_time if current_time > 0 else 0
        
        return result
        
    def sjf_scheduling(self):
        result = SchedulingResult()
        processes = sorted(self.processes, key=lambda x: (x.arrival_time, x.burst_time))
        
        current_time = 0
        gantt = []
        ready_queue = []
        i = 0
        n = len(processes)
        
        while i < n or ready_queue:
            while i < n and processes[i].arrival_time <= current_time:
                ready_queue.append(processes[i])
                i += 1
                
            if not ready_queue:
                current_time = processes[i].arrival_time
                continue
                
            ready_queue.sort(key=lambda x: x.burst_time)
            process = ready_queue.pop(0)
            
            process.completion_time = current_time + process.burst_time
            process.turnaround_time = process.completion_time - process.arrival_time
            process.waiting_time = process.turnaround_time - process.burst_time
            
            gantt.append((process.pid, current_time, process.completion_time))
            current_time = process.completion_time
            
        result.processes = processes
        result.gantt_chart = gantt
        result.avg_turnaround = sum(p.turnaround_time for p in processes) / len(processes)
        result.avg_waiting = sum(p.waiting_time for p in processes) / len(processes)
        result.throughput = len(processes) / current_time if current_time > 0 else 0
        
        return result
        
    def round_robin_scheduling(self, quantum):
        result = SchedulingResult()
        processes = sorted(self.processes, key=lambda x: x.arrival_time)
        
        current_time = 0
        gantt = []
        ready_queue = deque()
        remaining_processes = deque(processes.copy())
        process_map = {p.pid: p for p in processes}
        
        while remaining_processes or ready_queue:
            while remaining_processes and remaining_processes[0].arrival_time <= current_time:
                ready_queue.append(remaining_processes.popleft())
                
            if not ready_queue:
                current_time = remaining_processes[0].arrival_time
                continue
                
            process = ready_queue.popleft()
            
            if process.response_time == -1:
                process.response_time = current_time - process.arrival_time
                
            exec_time = min(quantum, process.remaining_time)
            gantt.append((process.pid, current_time, current_time + exec_time))
            
            process.remaining_time -= exec_time
            current_time += exec_time
            
            while remaining_processes and remaining_processes[0].arrival_time <= current_time:
                ready_queue.append(remaining_processes.popleft())
                
            if process.remaining_time > 0:
                ready_queue.append(process)
            else:
                process.completion_time = current_time
                process.turnaround_time = process.completion_time - process.arrival_time
                process.waiting_time = process.turnaround_time - process.burst_time
                
        result.processes = processes
        result.gantt_chart = gantt
        result.avg_turnaround = sum(p.turnaround_time for p in processes) / len(processes)
        result.avg_waiting = sum(p.waiting_time for p in processes) / len(processes)
        result.throughput = len(processes) / current_time if current_time > 0 else 0
        
        return result
        
    def priority_scheduling(self):
        result = SchedulingResult()
        processes = sorted(self.processes, key=lambda x: (x.arrival_time, x.priority))
        
        current_time = 0
        gantt = []
        ready_queue = []
        i = 0
        n = len(processes)
        
        while i < n or ready_queue:
            while i < n and processes[i].arrival_time <= current_time:
                ready_queue.append(processes[i])
                i += 1
                
            if not ready_queue:
                current_time = processes[i].arrival_time
                continue
                
            ready_queue.sort(key=lambda x: x.priority)
            process = ready_queue.pop(0)
            
            process.completion_time = current_time + process.burst_time
            process.turnaround_time = process.completion_time - process.arrival_time
            process.waiting_time = process.turnaround_time - process.burst_time
            
            gantt.append((process.pid, current_time, process.completion_time))
            current_time = process.completion_time
            
        result.processes = processes
        result.gantt_chart = gantt
        result.avg_turnaround = sum(p.turnaround_time for p in processes) / len(processes)
        result.avg_waiting = sum(p.waiting_time for p in processes) / len(processes)
        result.throughput = len(processes) / current_time if current_time > 0 else 0
        
        return result
        
    def display_results(self, result):
        # Update process table with all calculated metrics
        self.update_process_table(result.processes)
        
        # Update stats at bottom
        self.avg_turnaround_label.setText(f"Average Turnaround Time: {result.avg_turnaround:.2f}")
        self.avg_waiting_label.setText(f"Average Waiting Time: {result.avg_waiting:.2f}")
        self.throughput_label.setText(f"Throughput: {result.throughput:.2f} processes/unit time")
        
        # Draw Gantt chart
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        
        if not result.gantt_chart:
            ax.text(0.5, 0.5, 'No Gantt chart data', ha='center', va='center')
            self.canvas.draw()
            return
            
        # Create color map
        colors = plt.cm.get_cmap('tab20', len(result.processes))
        pid_to_color = {p.pid: colors(i) for i, p in enumerate(result.processes)}
        
        # Draw Gantt chart bars
        max_time = max(end for _, _, end in result.gantt_chart)
        y_ticks = []
        
        for i, (pid, start, end) in enumerate(result.gantt_chart):
            ax.broken_barh([(start, end - start)], (i - 0.4, 0.8), 
                          facecolors=pid_to_color[pid])
            ax.text((start + end) / 2, i, f"P{pid}", 
                   ha='center', va='center', color='white')
            y_ticks.append(i)
            
        # Format axes
        ax.set_yticks(y_ticks)
        ax.set_yticklabels([f"P{pid}" for pid, _, _ in result.gantt_chart])
        ax.set_xlabel('Time', fontsize=12)
        ax.set_ylabel('Processes', fontsize=12)
        ax.set_title('Gantt Chart - Process Execution Timeline', fontsize=14, pad=20)
        ax.grid(True)
        
        # Make Gantt chart fonts larger
        ax.tick_params(axis='both', which='major', labelsize=12)
        
        # Set x-axis limits with some padding
        ax.set_xlim(0, max_time * 1.1)
        
        # Add border around the Gantt chart
        for spine in ax.spines.values():
            spine.set_linewidth(2)
            spine.set_color('#D3D3D3')
        
        self.canvas.draw()

class AlertPanel(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(2)
        
        self.cpu_threshold = 80
        self.memory_threshold = 70
        
        header_layout = QHBoxLayout()
        header_label = QLabel("Alerts & Notifications")
        header_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        self.minimize_btn = QPushButton("−")
        self.minimize_btn.setFixedSize(20, 20)
        
        header_layout.addWidget(header_label)
        header_layout.addWidget(self.minimize_btn)
        
        self.alerts_list = QListWidget()
        self.alerts_list.setMaximumHeight(150)
        self.alerts_list.setStyleSheet("font-size: 14px;")
        
        layout.addLayout(header_layout)
        layout.addWidget(self.alerts_list)
        
    def add_alert(self, message, level="warning"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        item = QListWidgetItem(f"[{timestamp}] {message}")
        if level == "critical":
            item.setForeground(QColor("#FF4C4C"))
        elif level == "warning":
            item.setForeground(QColor("#FFA500"))
        self.alerts_list.insertItem(0, item)
        if self.alerts_list.count() > 100:
            self.alerts_list.takeItem(self.alerts_list.count() - 1)
            
    def apply_theme(self, colors):
        self.setStyleSheet(f"""
            QFrame {{
                background-color: {colors['secondary_bg']};
                border: 2px solid {colors['border']};
                color: {colors['text']};
            }}
            QLabel {{
                color: {colors['text']};
                font-size: 16px;
            }}
            QPushButton {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                border: 1px solid {colors['border']};
            }}
            QListWidget {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                border: 1px solid {colors['border']};
                font-size: 14px;
            }}
        """)

class ProcessControlPanel(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(10)
        
        theme_layout = QHBoxLayout()
        self.theme_label = QLabel("Theme:")
        self.theme_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["🌙 Dark Theme", "☀️ Light Theme", "🎮 Cyberpunk Theme"])
        self.theme_combo.setStyleSheet("font-size: 14px;")
        
        theme_layout.addWidget(self.theme_label)
        theme_layout.addWidget(self.theme_combo)
        
        self.refresh_btn = QPushButton("⟳ Refresh")
        self.refresh_btn.setStyleSheet("font-size: 14px;")
        
        self.scheduling_btn = QPushButton("⏳ CPU Scheduling")
        self.scheduling_btn.setStyleSheet("font-size: 14px;")
        
        for btn in [self.refresh_btn, self.scheduling_btn]:
            btn.setMinimumWidth(120)
        
        layout.addLayout(theme_layout)
        layout.addWidget(self.refresh_btn)
        layout.addWidget(self.scheduling_btn)
        layout.addStretch()
        
    def apply_theme(self, colors):
        button_style = f"""
            QPushButton {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                border: 2px solid {colors['border']};
                padding: 8px 15px;
                border-radius: 5px;
                min-width: 120px;
                font-weight: bold;
                font-size: 14px;
            }}
            QPushButton:hover {{
                background-color: {colors['button_scheduling']};
                border-color: {colors['text']};
            }}
            QPushButton:pressed {{
                background-color: {colors['primary_bg']};
            }}
        """
        
        self.refresh_btn.setStyleSheet(button_style.replace(colors['button_scheduling'], colors['button_refresh']))
        self.scheduling_btn.setStyleSheet(button_style)
        
        self.theme_combo.setStyleSheet(f"""
            QComboBox {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                border: 2px solid {colors['border']};
                padding: 8px;
                border-radius: 5px;
                min-width: 180px;
                font-weight: bold;
                font-size: 14px;
            }}
            QComboBox::drop-down {{
                border: none;
            }}
            QComboBox::down-arrow {{
                image: none;
                border-left: 5px solid {colors['border']};
                height: 10px;
            }}
            QComboBox:hover {{
                border-color: {colors['text']};
            }}
        """)
        
        self.theme_label.setStyleSheet(f"""
            QLabel {{
                color: {colors['text']};
                font-weight: bold;
                font-size: 14px;
            }}
        """)

class SystemMonitor(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Process Visualization Tool")
        self.current_theme = ThemeColors.DARK
        self.setup_ui()
        self.apply_theme(self.current_theme)
        
    def setup_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QGridLayout(main_widget)
        layout.setSpacing(10)
        
        # Top stats panel
        top_panel = QFrame()
        top_panel.setStyleSheet("border: 2px solid #D3D3D3; border-radius: 5px;")
        top_layout = QHBoxLayout(top_panel)
        top_layout.setContentsMargins(10, 10, 10, 10)
        top_layout.setSpacing(20)
        
        # CPU Usage Display
        cpu_frame = QFrame()
        cpu_layout = QVBoxLayout(cpu_frame)
        cpu_layout.setSpacing(5)
        
        cpu_header = QHBoxLayout()
        self.cpu_label = QLabel("CPU USAGE")
        self.cpu_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        self.cpu_value = QLabel("0%")
        self.cpu_value.setStyleSheet("font-size: 24px; font-weight: bold;")
        cpu_header.addWidget(self.cpu_label)
        cpu_header.addWidget(self.cpu_value)
        
        self.cpu_progress = QProgressBar()
        self.cpu_progress.setRange(0, 100)
        self.cpu_progress.setStyleSheet("""
            QProgressBar {
                height: 20px;
                border: 1px solid #D3D3D3;
                border-radius: 5px;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 5px;
            }
        """)
        
        self.cpu_plot = pg.PlotWidget(background=None)
        self.cpu_plot.setMaximumHeight(100)
        self.cpu_plot.setYRange(0, 100)
        self.cpu_plot.showGrid(True, True, alpha=0.3)
        self.cpu_data = np.zeros(30)
        
        self.cpu_bars = pg.BarGraphItem(
            x=range(len(self.cpu_data)),
            height=self.cpu_data,
            width=0.8,
            brush=self.current_theme['graph_cpu'],
            pen=None
        )
        self.cpu_plot.addItem(self.cpu_bars)
        self.cpu_plot.getAxis('bottom').setStyle(showValues=False)
        
        cpu_layout.addLayout(cpu_header)
        cpu_layout.addWidget(self.cpu_progress)
        cpu_layout.addWidget(self.cpu_plot)
        
        # Memory Usage Display
        mem_frame = QFrame()
        mem_layout = QVBoxLayout(mem_frame)
        mem_layout.setSpacing(5)
        
        mem_header = QHBoxLayout()
        self.mem_label = QLabel("MEMORY USAGE")
        self.mem_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        self.mem_value = QLabel("0%")
        self.mem_value.setStyleSheet("font-size: 24px; font-weight: bold;")
        mem_header.addWidget(self.mem_label)
        mem_header.addWidget(self.mem_value)
        
        self.mem_label_detail = QLabel("Used: 0 GB / Total: 0 GB")
        self.mem_label_detail.setStyleSheet("font-size: 14px;")
        
        self.mem_progress = QProgressBar()
        self.mem_progress.setRange(0, 100)
        self.mem_progress.setStyleSheet("""
            QProgressBar {
                height: 20px;
                border: 1px solid #D3D3D3;
                border-radius: 5px;
            }
            QProgressBar::chunk {
                background-color: #FFD700;
                border-radius: 5px;
            }
        """)
        
        self.mem_plot = pg.PlotWidget(background=None)
        self.mem_plot.setMaximumHeight(100)
        self.mem_plot.setYRange(0, 100)
        self.mem_plot.showGrid(True, True, alpha=0.3)
        self.mem_data = np.zeros(30)
        
        self.mem_bars = pg.BarGraphItem(
            x=range(len(self.mem_data)),
            height=self.mem_data,
            width=0.8,
            brush=self.current_theme['graph_memory'],
            pen=None
        )
        self.mem_plot.addItem(self.mem_bars)
        self.mem_plot.getAxis('bottom').setStyle(showValues=False)
        
        mem_layout.addLayout(mem_header)
        mem_layout.addWidget(self.mem_label_detail)
        mem_layout.addWidget(self.mem_progress)
        mem_layout.addWidget(self.mem_plot)
        
        top_layout.addWidget(cpu_frame, stretch=1)
        top_layout.addWidget(mem_frame, stretch=1)
        
        # Process List
        process_frame = QFrame()
        process_frame.setStyleSheet("border: 2px solid #D3D3D3; border-radius: 5px;")
        process_layout = QVBoxLayout(process_frame)
        process_layout.setContentsMargins(10, 10, 10, 10)
        
        process_header = QHBoxLayout()
        process_label = QLabel("ACTIVE PROCESSES")
        process_label.setStyleSheet("font-size: 16px; font-weight: bold;")
        self.control_panel = ProcessControlPanel()
        process_header.addWidget(process_label)
        process_header.addWidget(self.control_panel)
        
        self.process_table = QTableWidget()
        self.process_table.setColumnCount(7)
        self.process_table.setHorizontalHeaderLabels([
            "PID", "Name", "CPU %", "Memory %", "Status", "User", "Start Time"
        ])
        self.process_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.process_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.process_table.setSelectionMode(QTableWidget.SingleSelection)
        self.process_table.setStyleSheet("""
            QTableWidget {
                font-size: 14px;
                border: 1px solid #D3D3D3;
            }
            QHeaderView::section {
                font-size: 14px;
                padding: 5px;
            }
        """)
        
        process_layout.addLayout(process_header)
        process_layout.addWidget(self.process_table)
        
        # Right panel for alerts
        self.alert_panel = AlertPanel()
        self.alert_panel.setMaximumWidth(300)
        
        # Connect signals
        self.control_panel.refresh_btn.clicked.connect(self.update_stats)
        self.control_panel.scheduling_btn.clicked.connect(self.show_scheduling_dialog)
        self.control_panel.theme_combo.currentTextChanged.connect(self.change_theme)
        
        layout.addWidget(top_panel, 0, 0, 1, 2)
        layout.addWidget(process_frame, 1, 0, 1, 1)
        layout.addWidget(self.alert_panel, 1, 1, 1, 1)
        
        layout.setColumnStretch(0, 7)
        layout.setColumnStretch(1, 3)
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_stats)
        self.timer.start(1000)
        
        self.setMinimumSize(1200, 800)
        
    def show_scheduling_dialog(self):
        dialog = SchedulingVisualizer(self)
        dialog.exec()
        
    def change_theme(self, theme_name):
        if "Dark Theme" in theme_name:
            self.current_theme = ThemeColors.DARK
        elif "Light Theme" in theme_name:
            self.current_theme = ThemeColors.LIGHT
        else:
            self.current_theme = ThemeColors.CYBERPUNK
        self.apply_theme(self.current_theme)
        
    def apply_theme(self, colors):
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {colors['primary_bg']};
            }}
            QWidget {{
                background-color: {colors['primary_bg']};
                color: {colors['text']};
            }}
            QLabel {{
                color: {colors['text']};
            }}
            QFrame {{
                background-color: {colors['secondary_bg']};
                border: 2px solid {colors['border']};
                border-radius: 10px;
            }}
            QTableWidget {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                gridline-color: {colors['border']};
                border: none;
                border-radius: 5px;
            }}
            QHeaderView::section {{
                background-color: {colors['secondary_bg']};
                color: {colors['text']};
                border: 1px solid {colors['border']};
                padding: 8px;
                font-weight: bold;
            }}
            QProgressBar {{
                border: 1px solid {colors['border']};
                border-radius: 5px;
                text-align: center;
                background-color: {colors['secondary_bg']};
                max-height: 15px;
            }}
            QProgressBar::chunk {{
                background-color: {colors['progress_normal']};
                border-radius: 5px;
            }}
            QTableWidget::item {{
                padding: 5px;
            }}
            QTableWidget::item:selected {{
                background-color: {colors['button_scheduling']};
                color: {colors['text']};
            }}
        """)
        
        self.cpu_plot.setBackground(colors['secondary_bg'])
        self.mem_plot.setBackground(colors['secondary_bg'])
        self.cpu_bars.setOpts(brush=colors['graph_cpu'])
        self.mem_bars.setOpts(brush=colors['graph_memory'])
        self.update_progress_colors()
        self.alert_panel.apply_theme(colors)
        self.control_panel.apply_theme(colors)
        
        self.cpu_label.setStyleSheet(f"font-size: 16px; font-weight: bold; color: {colors['text']};")
        self.mem_label.setStyleSheet(f"font-size: 16px; font-weight: bold; color: {colors['text']};")
        self.cpu_value.setStyleSheet(f"font-size: 24px; font-weight: bold; color: {colors['text']};")
        self.mem_value.setStyleSheet(f"font-size: 24px; font-weight: bold; color: {colors['text']};")
        self.mem_label_detail.setStyleSheet(f"font-size: 14px; color: {colors['text']};")
        
    def update_progress_colors(self):
        cpu_value = self.cpu_progress.value()
        if cpu_value >= 90:
            color = self.current_theme['progress_critical']
        elif cpu_value >= 80:
            color = self.current_theme['progress_warning']
        else:
            color = self.current_theme['progress_normal']
        self.cpu_progress.setStyleSheet(f"""
            QProgressBar::chunk {{
                background-color: {color};
                border-radius: 5px;
            }}
        """)
        
        mem_value = self.mem_progress.value()
        if mem_value >= 90:
            color = self.current_theme['progress_critical']
        elif mem_value >= 80:
            color = self.current_theme['progress_warning']
        else:
            color = self.current_theme['progress_normal']
        self.mem_progress.setStyleSheet(f"""
            QProgressBar::chunk {{
                background-color: {color};
                border-radius: 5px;
            }}
        """)
        
    def update_stats(self):
        # Update CPU
        cpu_percent = psutil.cpu_percent()
        self.cpu_value.setText(f"{cpu_percent}%")
        self.cpu_progress.setValue(int(cpu_percent))
        self.cpu_data = np.roll(self.cpu_data, -1)
        self.cpu_data[-1] = cpu_percent
        self.cpu_bars.setOpts(height=self.cpu_data)
        
        self.update_progress_colors()
        
        if cpu_percent > self.alert_panel.cpu_threshold:
            self.alert_panel.add_alert(f"High CPU usage: {cpu_percent}%", "critical")
        
        # Update Memory
        mem = psutil.virtual_memory()
        mem_percent = mem.percent
        used_gb = mem.used / (1024 ** 3)
        total_gb = mem.total / (1024 ** 3)
        
        self.mem_value.setText(f"{mem_percent}%")
        self.mem_label_detail.setText(f"Used: {used_gb:.1f} GB / Total: {total_gb:.1f} GB")
        self.mem_progress.setValue(int(mem_percent))
        self.mem_data = np.roll(self.mem_data, -1)
        self.mem_data[-1] = mem_percent
        self.mem_bars.setOpts(height=self.mem_data)
        
        if mem_percent > self.alert_panel.memory_threshold:
            self.alert_panel.add_alert(f"High Memory usage: {mem_percent}%", "critical")
        
        # Update Process List
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status', 'username', 'create_time']):
            try:
                pinfo = proc.info
                cpu_percent = pinfo['cpu_percent'] if pinfo['cpu_percent'] is not None else 0.0
                mem_percent = pinfo['memory_percent'] if pinfo['memory_percent'] is not None else 0.0
                create_time = datetime.fromtimestamp(pinfo['create_time']).strftime('%H:%M:%S')
                processes.append([
                    str(pinfo['pid']),
                    pinfo['name'],
                    f"{cpu_percent:.1f}",
                    f"{mem_percent:.1f}",
                    pinfo['status'],
                    pinfo['username'],
                    create_time
                ])
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        processes.sort(key=lambda x: float(x[2]), reverse=True)
        self.process_table.setRowCount(min(len(processes), 15))
        
        for i, proc in enumerate(processes[:15]):
            for j, value in enumerate(proc):
                item = QTableWidgetItem(str(value))
                item.setTextAlignment(Qt.AlignCenter)
                self.process_table.setItem(i, j, item)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = SystemMonitor()
    window.show()
    sys.exit(app.exec())
